import telebot
from telebot import types
import sqlite3
import time
import os

TOKEN = os.getenv("TOKEN")
bot = telebot.TeleBot(TOKEN)

db = sqlite3.connect("trk_bot.db", check_same_thread=False)
cursor = db.cursor()

user_states = {}

def get_main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üíº –ë–∞–ª–∞–Ω—Å", "üè¶ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
    kb.row("üéÆ –ò–≥—Ä—ã", "üßë‚Äçü§ù‚Äçüßë –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
    kb.row("üí∏ –í—ã–≤–µ—Å—Ç–∏", "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    return kb

def get_back_markup():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    return kb

@bot.message_handler(func=lambda m: m.text == "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
def back_to_menu(msg):
    bot.send_message(msg.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())
  @bot.message_handler(commands=['start'])
def start(msg):
    user_id = str(msg.from_user.id)
    username = msg.from_user.username or ""
    ip = str(msg.chat.id)  # IP –º–æ–∂–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π IP

    # –†–µ—Ñ–µ—Ä–∞–ª–∫–∞ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω ?start=ref123456)
    args = msg.text.split()
    ref = None
    if len(args) > 1 and args[1].startswith("ref"):
        ref = args[1][3:]

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT * FROM users WHERE tg_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO users (tg_id, username, ip, referrer) VALUES (?, ?, ?, ?)",
                       (user_id, username, ip, ref))
        db.commit()
        if ref:
            cursor.execute("INSERT INTO referrals (user_id, invited_id, time) VALUES (?, ?, ?)",
                           (ref, user_id, int(time.time())))
            cursor.execute("UPDATE users SET balance = balance + 1 WHERE tg_id = ?", (ref,))
            db.commit()
            bot.send_message(int(ref), "–í—ã –ø–æ–ª—É—á–∏–ª–∏ +1 USDT –∑–∞ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞!")

    bot.send_message(msg.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *TRK-–ë–æ—Ç*!\n\n"
        "üìà –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å *–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å*, *–∏–≥—Ä–∞—Ç—å* –∏ *–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å* USDT –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ –∏ –Ω–∞—á–Ω–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
        reply_markup=get_main_menu(),
        parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text == "üíº –ë–∞–ª–∞–Ω—Å")
def balance(msg):
    user_id = str(msg.from_user.id)
    cursor.execute("SELECT balance FROM users WHERE tg_id = ?", (user_id,))
    result = cursor.fetchone()
    balance = result[0] if result else 0
    bot.send_message(msg.chat.id, f"üíº –í–∞—à –±–∞–ª–∞–Ω—Å: {balance:.2f} USDT", reply_markup=get_back_markup())
  @bot.message_handler(func=lambda m: m.text == "üè¶ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
def invest_menu(msg):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üìà –í–ª–æ–∂–∏—Ç—å 150$", "üìà –í–ª–æ–∂–∏—Ç—å 350$")
    kb.row("üìà –í–ª–æ–∂–∏—Ç—å 750$", "üìä –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(msg.chat.id, 
        "*–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π —Å TRK:*\n\n"
        "‚Ä¢ 150$ ‚Üí 4$/–¥–µ–Ω—å (75 –¥–Ω–µ–π)\n"
        "‚Ä¢ 350$ ‚Üí 9$/–¥–µ–Ω—å (75 –¥–Ω–µ–π)\n"
        "‚Ä¢ 750$ ‚Üí 25$/–¥–µ–Ω—å (75 –¥–Ω–µ–π)\n\n"
        "üí∞ –î–æ—Ö–æ–¥ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –Ω–∞ –±–∞–ª–∞–Ω—Å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
        reply_markup=kb,
        parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text in ["üìà –í–ª–æ–∂–∏—Ç—å 150$", "üìà –í–ª–æ–∂–∏—Ç—å 350$", "üìà –í–ª–æ–∂–∏—Ç—å 750$"])
def process_invest(msg):
    user_id = str(msg.from_user.id)
    amount = int(msg.text.split()[1].replace("$", ""))
    plans = {150: 4, 350: 9, 750: 25}
    daily = plans[amount]
    duration = 75 * 86400  # 75 –¥–Ω–µ–π

    cursor.execute("SELECT balance FROM users WHERE tg_id = ?", (user_id,))
    bal = cursor.fetchone()[0]
    if bal < amount:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=get_main_menu())
        return

    now = int(time.time())
    cursor.execute("UPDATE users SET balance = balance - ? WHERE tg_id = ?", (amount, user_id))
    cursor.execute("INSERT INTO investments (user_id, amount, daily_income, start_time) VALUES (?, ?, ?, ?)",
                   (user_id, amount, daily, now))
    db.commit()

    bot.send_message(msg.chat.id, f"‚úÖ –í—ã –≤–ª–æ–∂–∏–ª–∏ {amount}$ ‚Äî –ø–æ–ª—É—á–∞–µ—Ç–µ {daily}$/–¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ 75 –¥–Ω–µ–π.",
                     reply_markup=get_main_menu())

@bot.message_handler(func=lambda m: m.text == "üìä –ú–æ–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏")
def my_investments(msg):
    user_id = str(msg.from_user.id)
    cursor.execute("SELECT amount, daily_income, start_time FROM investments WHERE user_id = ?", (user_id,))
    rows = cursor.fetchall()

    if not rows:
        bot.send_message(msg.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π.", reply_markup=get_main_menu())
        return

    text = "üìä –í–∞—à–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:\n\n"
    now = int(time.time())
    for amount, daily, start in rows:
        days_passed = (now - start) // 86400
        days_left = max(0, 75 - days_passed)
        text += f"‚Ä¢ {amount}$ ‚Üí {daily}$/–¥–µ–Ω—å\n   –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"

    bot.send_message(msg.chat.id, text, reply_markup=get_back_markup())
  @bot.message_handler(func=lambda m: m.text == "üéÆ –ò–≥—Ä—ã")
def game_menu(msg):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row("üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "‚öñÔ∏è –ß—ë—Ç / –ù–µ—á—ë—Ç")
    kb.row("‚úÇÔ∏è –ö–ù–ë", "‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(msg.chat.id, 
        "*–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:*\n\n"
        "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ ‚Äî —Å—Ç–∞–≤–∫–∞ 1$, –≤—ã–∏–≥—Ä—ã—à 2$\n"
        "‚öñÔ∏è –ß—ë—Ç / –ù–µ—á—ë—Ç ‚Äî —Å—Ç–∞–≤–∫–∞ 1$, –≤—ã–∏–≥—Ä—ã—à 1.9$\n"
        "‚úÇÔ∏è –ö–ù–ë ‚Äî —Å—Ç–∞–≤–∫–∞ 1$, –≤—ã–∏–≥—Ä—ã—à 1.75$\n\n"
        "‚ö†Ô∏è –®–∞–Ω—Å –≤—ã–∏–≥—Ä—ã—à–∞ ‚Äî ~40%",
        reply_markup=kb,
        parse_mode="Markdown")
  @bot.message_handler(func=lambda m: m.text == "üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
def guess_number_start(msg):
    user_id = str(msg.from_user.id)
    cursor.execute("SELECT balance FROM users WHERE tg_id = ?", (user_id,))
    balance = cursor.fetchone()[0]

    if balance < 1:
        bot.send_message(msg.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return

    user_states[user_id] = "guess_number"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(1, 6):
        kb.add(str(i))
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(msg.chat.id, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5. –£–≥–∞–¥–∞–π!", reply_markup=kb)

@bot.message_handler(func=lambda m: user_states.get(str(m.from_user.id)) == "guess_number")
def guess_number_check(msg):
    user_id = str(msg.from_user.id)
    try:
        number = int(msg.text)
        if number < 1 or number > 5:
            raise ValueError
    except:
        bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5.")
        return

    import random
    cursor.execute("UPDATE users SET balance = balance - 1 WHERE tg_id = ?", (user_id,))
    win = random.random() <= 0.4

    if win:
        cursor.execute("UPDATE users SET balance = balance + 2 WHERE tg_id = ?", (user_id,))
        bot.send_message(msg.chat.id, "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏! +2$")
    else:
        bot.send_message(msg.chat.id, "–í—ã –Ω–µ —É–≥–∞–¥–∞–ª–∏.")

    db.commit()
    user_states.pop(user_id)
  @bot.message_handler(func=lambda m: m.text == "‚öñÔ∏è –ß—ë—Ç / –ù–µ—á—ë—Ç")
def even_odd_start(msg):
    user_id = str(msg.from_user.id)
    cursor.execute("SELECT balance FROM users WHERE tg_id = ?", (user_id,))
    balance = cursor.fetchone()[0]

    if balance < 1:
        bot.send_message(msg.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏.")
        return

    user_states[user_id] = "even_odd"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ß—ë—Ç", "–ù–µ—á—ë—Ç")
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ: –ß—ë—Ç –∏–ª–∏ –ù–µ—á—ë—Ç", reply_markup=kb)

@bot.message_handler(func=lambda m: user_states.get(str(m.from_user.id)) == "even_odd")
def even_odd_check(msg):
    user_id = str(msg.from_user.id)
    choice = msg.text.lower()
    if choice not in ["—á—ë—Ç", "–Ω–µ—á—ë—Ç"]:
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ß—ë—Ç –∏–ª–∏ –ù–µ—á—ë—Ç.")
        return

    import random
    cursor.execute("UPDATE users SET balance = balance - 1 WHERE tg_id = ?", (user_id,))
    win = random.random() <= 0.4

    if win:
        cursor.execute("UPDATE users SET balance = balance + 1.9 WHERE tg_id = ?", (user_id,))
        bot.send_message(msg.chat.id, f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! +1.9$")
    else:
        bot.send_message(msg.chat.id, "–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")

    db.commit()
    user_states.pop(user_id)
  @bot.message_handler(func=lambda m: m.text == "‚úÇÔ∏è –ö–ù–ë")
def rps_start(msg):
    user_id = str(msg.from_user.id)
    cursor.execute("SELECT balance FROM users WHERE tg_id = ?", (user_id,))
    balance = cursor.fetchone()[0]

    if balance < 1:
        bot.send_message(msg.chat.id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.")
        return

    user_states[user_id] = "rps"
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("–ö–∞–º–µ–Ω—å", "–ù–æ–∂–Ω–∏—Ü—ã", "–ë—É–º–∞–≥–∞")
    kb.add("‚Ü©Ô∏è –ù–∞–∑–∞–¥")
    bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ:", reply_markup=kb)

@bot.message_handler(func=lambda m: user_states.get(str(m.from_user.id)) == "rps")
def rps_check(msg):
    user_id = str(msg.from_user.id)
    user = msg.text.lower()
    options = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
    if user not in options:
        bot.send_message(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ: –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã –∏–ª–∏ –ë—É–º–∞–≥–∞.")
        return

    import random
    bot_choice = random.choice(options)
    win = random.random() <= 0.4

    cursor.execute("UPDATE users SET balance = balance - 1 WHERE tg_id = ?", (user_id,))
    if win:
        cursor.execute("UPDATE users SET balance = balance + 1.75 WHERE tg_id = ?", (user_id,))
        bot.send_message(msg.chat.id, f"–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ 1.75$")
    else:
        bot.send_message(msg.chat.id, f"–ë–æ—Ç –≤—ã–±—Ä–∞–ª: {bot_choice}\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏.")

    db.commit()
    user_states.pop(user_id)
  @bot.message_handler(func=lambda m: m.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(msg):
    user_id = str(msg.from_user.id)

    # –ë–∞–ª–∞–Ω—Å
    cursor.execute("SELECT balance FROM users WHERE tg_id = ?", (user_id,))
    balance = cursor.fetchone()[0]

    # –ò–≥—Ä—ã
    cursor.execute("SELECT COUNT(*), SUM(win), SUM(amount) FROM games WHERE user_id = ?", (user_id,))
    game_data = cursor.fetchone()
    total_games = game_data[0] or 0
    wins = game_data[1] or 0
    total_spent = game_data[2] or 0

    # –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
    cursor.execute("SELECT COUNT(*), SUM(amount) FROM investments WHERE user_id = ?", (user_id,))
    invest_data = cursor.fetchone()
    total_invests = invest_data[0] or 0
    invested_sum = invest_data[1] or 0

    # –†–µ—Ñ–µ—Ä–∞–ª—ã
    cursor.execute("SELECT COUNT(*) FROM referrals WHERE user_id = ?", (user_id,))
    ref_count = cursor.fetchone()[0] or 0

    text = (
        f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
        f"–ë–∞–ª–∞–Ω—Å: {balance:.2f} USDT\n"
        f"–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä: {total_games}\n"
        f"–ü–æ–±–µ–¥: {wins}\n"
        f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ –Ω–∞ –∏–≥—Ä—ã: {total_spent or 0:.2f} USDT\n"
        f"–ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_invests} –Ω–∞ —Å—É–º–º—É {invested_sum or 0:.2f} USDT\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ: {ref_count}"
    )
    bot.send_message(msg.chat.id, text, reply_markup=get_back_markup())
  @bot.message_handler(func=lambda m: m.text == "üí∏ –í—ã–≤–µ—Å—Ç–∏")
def request_withdraw(msg):
    user_states[str(msg.from_user.id)] = "awaiting_withdraw"
    bot.send_message(msg.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ TRC20-–∫–æ—à–µ–ª—ë–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30 TNk...):",
                     reply_markup=get_back_markup())

@bot.message_handler(func=lambda m: user_states.get(str(m.from_user.id)) == "awaiting_withdraw")
def process_withdraw(msg):
    user_id = str(msg.from_user.id)
    ip = str(msg.chat.id)
    try:
        amount_str, wallet = msg.text.strip().split()
        amount = float(amount_str)
    except:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 30 TXXXXXXXX", reply_markup=get_back_markup())
        return

    cursor.execute("SELECT COUNT(*) FROM withdrawals WHERE wallet = ?", (wallet,))
    if cursor.fetchone()[0] > 0:
        bot.send_message(msg.chat.id, "‚ùå –≠—Ç–æ—Ç –∫–æ—à–µ–ª—ë–∫ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è.", reply_markup=get_back_markup())
        return

    cursor.execute("SELECT ip FROM users WHERE tg_id = ?", (user_id,))
    user_ip = cursor.fetchone()[0]
    cursor.execute("SELECT COUNT(*) FROM users WHERE ip = ?", (user_ip,))
    if cursor.fetchone()[0] > 1:
        bot.send_message(msg.chat.id, "‚ùå –° –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤.",
                         reply_markup=get_back_markup())
        return

    cursor.execute("SELECT balance FROM users WHERE tg_id = ?", (user_id,))
    balance = cursor.fetchone()[0]
    if balance < amount:
        bot.send_message(msg.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.", reply_markup=get_back_markup())
        return
    if amount < 25:
        bot.send_message(msg.chat.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ ‚Äî 25 USDT.", reply_markup=get_back_markup())
        return

    cursor.execute("UPDATE users SET balance = balance - ? WHERE tg_id = ?", (amount, user_id))
    cursor.execute("INSERT INTO withdrawals (user_id, amount, wallet, time) VALUES (?, ?, ?, ?)",
                   (user_id, amount, wallet, int(time.time())))
    db.commit()

    bot.send_message(msg.chat.id, f"‚úÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–≤–æ–¥ {amount}$ –ø—Ä–∏–Ω—è—Ç. –í—ã–ø–ª–∞—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.",
                     reply_markup=get_main_menu())
    user_states.pop(user_id)
  @bot.message_handler(func=lambda m: m.text == "üßë‚Äçü§ù‚Äçüßë –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
def invite_friend(msg):
    user_id = str(msg.from_user.id)
    username = bot.get_me().username
    link = f"https://t.me/{username}?start=ref{user_id}"
    
    cursor.execute("SELECT COUNT(*) FROM referrals WHERE user_id = ?", (user_id,))
    invited = cursor.fetchone()[0]

    text = (
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n{link}\n\n"
        f"–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {invited} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        f"–ë–æ–Ω—É—Å: +1 USDT –∑–∞ –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ"
    )

    bot.send_message(msg.chat.id, text, reply_markup=get_back_markup())
  print("ü§ñ –ë–æ—Ç TRK –∑–∞–ø—É—â–µ–Ω...")
bot.polling(none_stop=True)
